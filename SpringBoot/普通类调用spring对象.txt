






Spring--普通类获取spring管理的bean对象：
两种方式：
1.配置文件
ApplicationContext context = new FileSystemXmlApplicationContext("applicationContext.xml");
context.getBean("beanId"); 

2.注解

在Spring Boot可以扫描的包下新建类SpringUtil，继承ApplicationContextAware。（PS:@Component一定要有）


package com.xdcr.framework.core.common;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Component;

/**
 * 创建时间：2017年11月23日 上午10:53:44 项目名称：XDCR
 * 
 * @author hm
 * @version 1.0
 * @since JDK 1.7 文件名称：SpringUtil.java 类说明：
 */
@Component
public class SpringUtil implements ApplicationContextAware {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	private static ApplicationContext applicationContext = null;

	@Override
	public void setApplicationContext(ApplicationContext arg0)
			throws BeansException {
		if (SpringUtil.applicationContext == null) {
			SpringUtil.applicationContext = arg0;
		}
	}

	// 获取applicationContext
	public static ApplicationContext getApplicationContext() {
		return applicationContext;
	}

	// 通过name获取 Bean.
	public static Object getBean(String name) {
		return getApplicationContext().getBean(name);

	}

	// 通过class获取Bean.
	public static <T> T getBean(Class<T> clazz) {
		return getApplicationContext().getBean(clazz);
	}

	// 通过name,以及Clazz返回指定的Bean
	public static <T> T getBean(String name, Class<T> clazz) {
		return getApplicationContext().getBean(name, clazz);
	}

}

调用：
StringRedisTemplate tRedisTemplate = (StringRedisTemplate) SpringUtil.getBean("redisTemplate");
kapchaVal = tRedisTemplate.opsForValue().get(kaptchaKey);









